<?php

/**
 * @file
 * Registers various hooks for Pubkey Encrypt to act upon.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\user\UserInterface;
use \Drupal\user\RoleInterface;
use \Drupal\user\Entity\Role;

/**
 * Implements hook_form_alter().
 */
function pubkey_encrypt_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      // Try to have this form pass through our custom handler first.
      array_unshift($form['#submit'], 'pubkey_encrypt_login_submit');
      break;

    case 'user_form':
      // Have this form pass through our custom handler too.
      $form['actions']['submit']['#submit'][] = 'pubkey_encrypt_form_submit';
  }
}

/**
 * Custom submit handler for login form.
 */
function pubkey_encrypt_login_submit($form, FormStateInterface &$form_state) {
  // Fetch inputted login credentials to be used by the module.
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
  $credentials = $pubkey_encrypt_manager
    ->fetchLoginCredentials($form, $form_state);

  // Temporarily store the plaintext password to be used for hook_user_login().
  // We cannot put this in private_tempstore as no user has been logged in yet.
  $username = $form_state->getValue('name');
  $tempstore = \Drupal::service('user.shared_tempstore')->get('pubkey_encrypt');
  $tempstore->set($username, $credentials);
}

/**
 * Implements hook_user_login().
 */
function pubkey_encrypt_user_login(UserInterface $account) {
  // A user just logged in.
  $username = $account->get('name')->getString();

  // These values would be present for the user who just logged in, due to our
  // custom_login_submit.
  $tempstore = \Drupal::service('user.shared_tempstore')->get('pubkey_encrypt');
  $password = $tempstore->get($username);

  // Unset the temporarily stored plaintext password from the tempstore.
  $tempstore->delete($username);

  // Tell the keys manager service that the user just logged in.
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
  $pubkey_encrypt_manager->userLoggedIn($account, $password);
}

/**
 * Custom submit handler for user form.
 */
function pubkey_encrypt_form_submit($form, FormStateInterface &$form_state) {
  // Fetch changed login credentials to be used by the module.
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
  $credentials = $pubkey_encrypt_manager
    ->fetchChangedLoginCredentials($form, $form_state);

  $old_credentials = $credentials['old'];
  $new_credentials = $credentials['new'];

  // Check if a user has requested to change credentials.
  if ($old_credentials != '' && $new_credentials != '' && $old_credentials != $new_credentials) {
    // Manage the credentials change.
    $user_id = $form_state->getValue('uid');
    $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
    $pubkey_encrypt_manager->userCredentialsChanged($user_id, $old_credentials, $new_credentials);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function pubkey_encrypt_user_insert(UserInterface $account) {
  // Initialize keys for the newly registered user.
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
  $pubkey_encrypt_manager->initializeUserKeys($account);

  // If the new user is given "administer permissions" permission, update all
  // Role keys so to give him complete control over them.
  if ($account->hasPermission('administer permissions')) {
    $pubkey_encrypt_manager->updateAllRoleKeys();
  }
  // Otherwise update the relevant Role keys so to give him access to those.
  else {
    foreach ($account->getRoles(TRUE) as $role) {
      $role = Role::load($role);
      $pubkey_encrypt_manager
        ->updateRoleKey($role);
    }
  }
}

/**
 * Implements hook_user_role_delete().
 */
function pubkey_encrypt_user_role_delete(RoleInterface $role) {
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');

  // Remove the corresponding Encryption Profile for the Role first.
  $key = \Drupal::service('key.repository')->getKey($role->id() . "_role_key");
  $pubkey_encrypt_manager->removeEncryptionProfile($key);

  // Now delete the Role key.
  $pubkey_encrypt_manager->deleteRoleKey($role);

  // If the role had "administer permissions" permission in it, we need to
  // update all Role keys. This would cause all users updated with "administer
  // permissions" permission get complete control over all Role keys.
  if ($role->hasPermission("administer permissions")) {
    $pubkey_encrypt_manager->updateAllRoleKeys();
  }
}

/**
 * Implements hook_user_role_insert().
 */
function pubkey_encrypt_user_role_insert(RoleInterface $role) {
  // Create a Role key upon Role creation.
  $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
  $pubkey_encrypt_manager->generateRoleKey($role);

  // Create a corresponding Encryption Profile for the Role key.
  $key = \Drupal::service('key.repository')->getKey($role->id() . "_role_key");
  $pubkey_encrypt_manager->generateEncryptionProfile($key);
}

/**
 * Implements hook_user_update().
 */
function pubkey_encrypt_user_update(UserInterface $account) {
  // Check if the user roles have been modified.
  $new_roles = $account->getRoles();
  $previous_roles = $account->original->getRoles();

  if ($new_roles != $previous_roles) {
    $added_roles = array_diff($new_roles, $previous_roles);
    $removed_roles = array_diff($previous_roles, $new_roles);
    $changed_roles = array_merge($added_roles, $removed_roles);

    // Update Role keys.
    $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
    foreach ($changed_roles as $role) {
      $role = Role::load($role);

      // We need to update all Role keys if any changed role has "administer
      // permissions" permission in it.
      if ($role->hasPermission("administer permissions")) {
        // This would cause all users updated with "administer permissions"
        // permission get complete control over all Role keys.
        $pubkey_encrypt_manager->updateAllRoleKeys();

        // Break the loop as all Role keys just got updated so moving forward
        // is unnecessary.
        break;
      }

      // Otherwise just update the specific Role key.
      $pubkey_encrypt_manager
        ->updateRoleKey($role);
    }
  }
}

/**
 * Implements hook_user_role_update().
 */
function pubkey_encrypt_user_role_update(RoleInterface $role) {
  // If a Role is given "administer permissions" permission, trigger the Role
  // key updates.
  if ($role->hasPermission("administer permissions") != $role->original->hasPermission("administer permissions")) {
    $pubkey_encrypt_manager = \Drupal::service('pubkey_encrypt.pubkey_encrypt_manager');
    // This would cause all users updated with "administer permissions"
    // permission get complete control over all Role keys.
    $pubkey_encrypt_manager->updateAllRoleKeys();
  }
}
